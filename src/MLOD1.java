package sage;

import java.awt.*;
import com.borland.jbcl.layout.*;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.tree.*;
import javax.swing.text.Document;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.io.*;
import java.util.*;

public class MLOD1
    extends SageFilePanel
    implements DocumentListener, ActionListener {
  IconNode analysis_node;
  IconNode errorF_node;
  IconNode errorpedigree_node;
  IconNode errorlocus_node;
  IconNode errortrait_node;
  IconNode errorgenome_node;
  IconNode pedi_node;
  IconNode marker_node;
  IconNode trait_node;
  IconNode genome_node;
  IconNode type_node;

  XYLayout xYLayout1 = new XYLayout();
  JLabel jLabel3 = new JLabel();
  JLabel jLabel4 = new JLabel();
  JTextField jTextField3 = new JTextField();
  JButton jButton3 = new JButton();
  JTextField jTextField4 = new JTextField();
  JButton jButton4 = new JButton();
  JLabel jLabel5 = new JLabel();
  JTextField jTextField5 = new JTextField();
  JButton jButton5 = new JButton();
  JLabel jLabel8 = new JLabel();
  JTextField jTextField6 = new JTextField();
  JButton jButton6 = new JButton();

  public MLOD1(sage_analysis_info data, IconNode inputnode, IconNode errornode) {
    Analysis_object = data;
    analysis_node = inputnode;
    errorF_node = errornode;
    setModel(new PropertyDataModel());
    Analysis_object.create_error_folder= true;
    try {
      jbInit();
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  public void setModel(DataCollectionModel model) {
    this.Datamodel = model;
    Datamodel.setValue("output_name", jTextField4.getText());
  }

  void jbInit() throws Exception {
    NodeInfo outputfolder = new NodeInfo("Output", "OutputFolder", "MLOD",
                                         Analysis_object, "");
    outputF_node = new IconNode(outputfolder, "OutputFolder");

    this.setLayout(xYLayout1);
    xYLayout1.setWidth(500);
    xYLayout1.setHeight(560);
    jLabel3.setToolTipText(
        "<html>Lists the alleles, allele frequencies and phenotype to genotype mapping " +
        "<br>for each marker locus.");
    jLabel3.setText("Marker locus file");
    jTextFieldPara.addMouseListener(new MLOD1_jTextField1_mouseAdapter(this));
    jTextFieldPed.addMouseListener(new MLOD1_jTextField2_mouseAdapter(this));
    jTextField3.setText("");
    jTextField3.addMouseListener(new MLOD1_jTextField3_mouseAdapter(this));
    jButton3.setText("...");

    jButton3.setToolTipText("Lists the alleles at each marker locus.");
    jButton3.setText("...");

    jTextField4.setToolTipText(
        "Specifies the name of the output file generated by this analysis.");
    jTextField4.setText("");
    jTextField4.addMouseListener(new MLOD1_jTextField4_mouseAdapter(this));
    jLabel4.setToolTipText(
        "Lists the genetic model for each trait being analyzed.");
    jLabel4.setText("Trait locus file");
    jButton4.setToolTipText("");
    jButton4.setText("...");

    jLabel5.setToolTipText(
        "<html>Contains a description of the linked marker regions, including distances " +
        "<br>between markers.");
    jLabel5.setText("Genome file");
    jTextField5.setToolTipText("");
    jTextField5.setText("");
    jTextField5.addMouseListener(new MLOD1_jTextField5_mouseAdapter(this));

    jNextButton.addActionListener(this);

    OutputNameField.addMouseListener(new MLOD1_OutputNameField_mouseAdapter(this));
    OutputNameField.setText("region");
    jButton5.setMargin(new Insets(2, 2, 2, 2));
    jButton5.setText("...");
   jLabel8.setText("Type file");
    jLabel8.setToolTipText(
            "<html>Produced by SEGREG. Lists penetrance and posterior type probabilities " +
            "<br>for each individual.");

    jButton6.setText("...");
    jTextField6.setText("");
    jTextField6.addMouseListener(new MLOD1_jTextField6_mouseAdapter(this));
    this.add(jLabelPara, new XYConstraints(20, 20, 113, 20));
    this.add(jLabelPed, new XYConstraints(20, 50, 113, 20));
    this.add(jLabel3, new XYConstraints(20, 80, 113, 20));
    this.add(jLabel4, new XYConstraints(20, 110, 113, 20));
    this.add(jTextFieldPara,  new XYConstraints(155, 20, 280, 20));
    this.add(jTextFieldPed,    new XYConstraints(155, 50, 280, 20));
    this.add(jTextField3,    new XYConstraints(155, 80, 280, 20));
    this.add(jButtonPed,  new XYConstraints(445, 50, 30, 20));
    this.add(jButton3,  new XYConstraints(445, 80, 30, 20));
    this.add(jButtonPara,  new XYConstraints(445, 20, 30, 20));
    this.add(jTextField4,    new XYConstraints(155, 110, 280, 20));
    this.add(jButton4,  new XYConstraints(445, 110, 30, 20));
    this.add(jLabel5, new XYConstraints(20, 140, 113, 20));
    this.add(jTextField5,    new XYConstraints(155, 140, 280, 20));
    this.add(jButton5,  new XYConstraints(445, 140, 30, 20));
     this.add(jLabel8,      new XYConstraints(20, 170, 113, 20));
    this.add(jTextField6,        new XYConstraints(155, 170, 280, 20));
    this.add(jButton6,       new XYConstraints(445, 170, 30, 20));
    this.add(jLabelOutputName,  new XYConstraints(20, 210, 113, 20));
    this.add(OutputNameField, new XYConstraints(155, 210, 280, 20));
    this.add(jNextButton, new XYConstraints(420, 520, 60, 25));

    jButtonPara.addActionListener(this);
    jButtonPed.addActionListener(this);
    jButton3.addActionListener(this);
    jButton4.addActionListener(this);
    jButton5.addActionListener(this);
    jButton6.addActionListener(this);
    jTextFieldPara.getDocument().addDocumentListener(this);
    jTextFieldPed.getDocument().addDocumentListener(this);
    jTextField3.getDocument().addDocumentListener(this);
    jTextField4.getDocument().addDocumentListener(this);
    jTextField5.getDocument().addDocumentListener(this);
    OutputNameField.getDocument().addDocumentListener(this);

    Datamodel.setValue("output_name", OutputNameField.getText());
  }

  public void actionPerformed(ActionEvent e) {
    Object ob = e.getSource();
    if (ob == jButtonPara) {
      jButton1_actionPerformed();
    }
    if (ob == jButtonPed) {
      jButton2_actionPerformed();
    }
    if (ob == jButton3) {
      jButton3_actionPerformed();
    }
    if (ob == jButton4) {
      jButton4_actionPerformed();
    }
    if (ob == jButton5) {
      jButton5_actionPerformed();
    }
    if (ob == jButton6) {
      jButton6_actionPerformed();
    }
    if (ob == jNextButton) {
      jNextButton_actionPerformed();
    }
  }

  void jNextButton_actionPerformed() {
    MyInternalFrame mf = (MyInternalFrame) Frame1.mainFrame1.activeinframe;
    mf.jTabbedPane1.setSelectedIndex(1);
  }

  void jButton1_actionPerformed() {
    jFileChooser1.setCurrentDirectory(new File(Frame1.mainFrame1.path_forFileChooser));
    jFileChooser1.setFileFilter(ParaFilter);
    jFileChooser1.setDialogTitle("Add Parameter File");

    if (jFileChooser1.APPROVE_OPTION == jFileChooser1.showOpenDialog(this)) {
      String filepath = jFileChooser1.getSelectedFile().getPath();
      String filename = jFileChooser1.getSelectedFile().getName();
      NodeInfo filenode = new NodeInfo(filename, "Parameter File", new File(filepath));
      insertparafile(filenode);
    }
  }

  public void insertparafile(NodeInfo source) {
    File importFile = (File) source.file;
    String FilePath = importFile.getPath();
    Datamodel.setValue("para_path", FilePath);
    jTextFieldPara.setText(FilePath);

    jFileChooser1.setCurrentDirectory(importFile);
    Frame1.mainFrame1.path_forFileChooser = FilePath;

    Analysis_object.para_file_path = FilePath;
    Analysis_object.input_file.add(FilePath);

    if (Analysis_object.create_input_folder == false) {
      NodeInfo nodeinfo = new NodeInfo("Input", "InputFolder", "MLOD",
                                       Analysis_object, "");
      IconNode node = new IconNode(nodeinfo, "InputFolder");

      inputF_node = addObject(node, analysis_node, false);
      Analysis_object.create_input_folder = true;
    }
    if (Analysis_object.create_para_file_node == false) {
      para_node = new IconNode(source, "Parameter File");

      addObject(para_node, inputF_node, false);
      Analysis_object.create_para_file_node = true;

      treeModel.nodeStructureChanged(errorF_node);

      if (errorF_node.getChildCount() < 1) {
          Analysis_object.create_error_folder= false;
        errorF_node.removeFromParent();
        treeModel.nodeStructureChanged(analysis_node);

        NodeInfo n = (NodeInfo) analysis_node.getUserObject();
        MLOD2 f2 = (MLOD2) n.component_vector.get(1);
        f2.jRunButton.setIcon(next_image);
      }
    }
    else {
      para_node.setUserObject(source);
    }
    TreePath p = new TreePath(analysis_node.getPath());
    Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);
    SetPanel2Info(source);
  }

  void SetPanel2Info(NodeInfo source) {
    NodeInfo n = (NodeInfo) analysis_node.getUserObject();
    final MLOD2 f2 = (MLOD2) n.component_vector.get(1);

    DataCollectionModel dm = (DataCollectionModel) source.infomodel;

    int totalsize = 0;

    if (dm.hasValue("TraitMarker_array")) {
      Vector TraitMarker_array = (Vector) dm.getValue("TraitMarker_array");
      int length1 = TraitMarker_array.size();
      totalsize = totalsize + length1;
    }

    if (dm.hasValue("Marker_array")) {
      Vector Marker_array = (Vector) dm.getValue("Marker_array");
      int length1 = Marker_array.size();
      totalsize = totalsize + length1;
    }

    final CheckableItem[] items = new CheckableItem[totalsize];
    int i = 0;

    if (dm.hasValue("TraitMarker_array")) {
      Vector TraitMarker_array = (Vector) dm.getValue("TraitMarker_array");
      for (Enumeration en = TraitMarker_array.elements(); en.hasMoreElements(); i++) {
        String temp = en.nextElement().toString();
        VariableData temp2 = new VariableData(temp, "trait_marker");
        items[i] = new CheckableItem(temp2);
      }
    }

    if (dm.hasValue("Marker_array")) {
      Vector Marker_array = (Vector) dm.getValue("Marker_array");
      for (Enumeration en = Marker_array.elements(); en.hasMoreElements(); i++) {
        String temp = en.nextElement().toString();
        VariableData temp2 = new VariableData(temp, "marker");
        items[i] = new CheckableItem(temp2);
      }
    }

    Runnable setinfo = new Runnable() {
      public void run() {
        f2.jTraitMarkerComboBox.setData(items);
      }
    };
    SwingUtilities.invokeLater(setinfo);
  }

  void jButton2_actionPerformed() {
    jFileChooser1.setFileFilter(FamilyFilter);
    jFileChooser1.setDialogTitle("Add Data File");

    if (jFileChooser1.APPROVE_OPTION == jFileChooser1.showOpenDialog(this)) {
      String filepath = jFileChooser1.getSelectedFile().getPath();
      String filename = jFileChooser1.getSelectedFile().getName();
      NodeInfo filenode = new NodeInfo(filename, "Pedigree File", new File(filepath));
      insertpedigreefile(filenode);
    }
  }

  public void insertpedigreefile(NodeInfo source) {
    File importFile = (File) source.file;
    String FilePath = importFile.getPath();
    Datamodel.setValue("pedi_path", FilePath);
    jTextFieldPed.setText(FilePath);

    jFileChooser1.setCurrentDirectory(importFile);
    Frame1.mainFrame1.path_forFileChooser = FilePath;

    Analysis_object.family_file_path = FilePath;
    Analysis_object.input_file.add(FilePath);

    if (Analysis_object.create_input_folder == false) {
      NodeInfo nodeinfo = new NodeInfo("Input", "InputFolder", "MLOD",
                                       Analysis_object, "");
      IconNode node = new IconNode(nodeinfo, "InputFolder");

      inputF_node = addObject(node, analysis_node, false);
      Analysis_object.create_input_folder = true;
    }
    if (Analysis_object.create_family_file_node == false) {
      pedi_node = new IconNode(source, "Pedigree File");

      addObject(pedi_node, inputF_node, false);
      Analysis_object.create_family_file_node = true;

      errorpedigree_node.removeFromParent();
      treeModel.nodeStructureChanged(errorF_node);

      if (errorF_node.getChildCount() < 1) {
          Analysis_object.create_error_folder= false;
        errorF_node.removeFromParent();
        treeModel.nodeStructureChanged(analysis_node);
        TreePath p = new TreePath(pedi_node.getPath());
        Frame1.mainFrame1.activeinframe.MyTree1.scrollPathToVisible(p);

        NodeInfo n = (NodeInfo) analysis_node.getUserObject();
        MLOD2 f2 = (MLOD2) n.component_vector.get(1);
        f2.jRunButton.setIcon(next_image);
      }
    }
    else {
      pedi_node.setUserObject(source);
      TreePath p = new TreePath(pedi_node.getPath());
      Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);
    }

    TreePath p = new TreePath(analysis_node.getPath());
    Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);

    SetMarkerList(source);
  }

  void SetMarkerList(NodeInfo source)
  {
      NodeInfo n = (NodeInfo) analysis_node.getUserObject();
      MLOD2 f2 = (MLOD2) n.component_vector.get(1);

      NodeInfo para = (NodeInfo)para_node.getUserObject();
      DataCollectionModel dm = (DataCollectionModel) para.infomodel;

      try {
          ArrayList list = GetMarkerList(dm, (File) source.file, true);

          CheckableItem[] list_model = f2.jTraitMarkerComboBox.ListData;
          int original_size = list_model.length;

          if (list.size()>0)
          {
              int list_size = list.size();
              CheckableItem[] total_items = new CheckableItem[list_size+original_size];

              for (int i = 0; i<original_size; i++)
              {
                  String temp = list_model[i].toString();
                  VariableData temp2 = new VariableData(temp, "marker");
                  total_items[i] = new CheckableItem(temp2);
              }

              for (int i = 0; i<list_size; i++)
              {
                  String temp = list.get(i).toString();
                  VariableData temp2 = new VariableData(temp, "marker");
                  total_items[i+original_size] = new CheckableItem(temp2);
              }
              f2.jTraitMarkerComboBox.setData(total_items);
          }
      } catch (Exception exe) {
          exe.printStackTrace();
      }
  }

  void jButton3_actionPerformed() {
    jFileChooser1.setFileFilter(MarkerLocusFilter);
    jFileChooser1.setDialogTitle("Add Locus File");

    if (jFileChooser1.APPROVE_OPTION == jFileChooser1.showOpenDialog(this)) {
      String filepath = jFileChooser1.getSelectedFile().getPath();
      String filename = jFileChooser1.getSelectedFile().getName();
      NodeInfo filenode = new NodeInfo(filename, "Marker Locus File", new File(filepath));
      insertlocusfile(filenode);
    }
  }

  public void insertlocusfile(NodeInfo source) {
    File importFile = (File) source.file;
    String FilePath = importFile.getPath();
    Datamodel.setValue("locus_path", FilePath);
    jTextField3.setText(FilePath);

    jFileChooser1.setCurrentDirectory(importFile);
    Frame1.mainFrame1.path_forFileChooser = FilePath;

    Analysis_object.locus_file_path = FilePath;
    Analysis_object.input_file.add(FilePath);

    if (Analysis_object.create_input_folder == false) {
      NodeInfo nodeinfo = new NodeInfo("Input", "InputFolder", "MLOD",
                                       Analysis_object, "");
      IconNode node = new IconNode(nodeinfo, "InputFolder");

      inputF_node = addObject(node, analysis_node, false);
      Analysis_object.create_input_folder = true;
    }
    if (Analysis_object.create_locus_file_node == false) {
      marker_node = new IconNode(source, "Marker Locus File");

      addObject(marker_node, inputF_node, false);
      Analysis_object.create_locus_file_node = true;

      errorlocus_node.removeFromParent();
      treeModel.nodeStructureChanged(errorF_node);

      if (errorF_node.getChildCount() < 1) {
          Analysis_object.create_error_folder= false;
        errorF_node.removeFromParent();
        treeModel.nodeStructureChanged(analysis_node);
        TreePath p = new TreePath(marker_node.getPath());
        Frame1.mainFrame1.activeinframe.MyTree1.scrollPathToVisible(p);

        NodeInfo n = (NodeInfo) analysis_node.getUserObject();
        MLOD2 f2 = (MLOD2) n.component_vector.get(1);
        f2.jRunButton.setIcon(next_image);
      }
    }

    else {
      marker_node.setUserObject(source);
      TreePath p = new TreePath(marker_node.getPath());
      Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);
    }

    TreePath p = new TreePath(analysis_node.getPath());
    Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);

  }

  void jButton4_actionPerformed() {
    jFileChooser1.setFileFilter(TraitLocusFilter);
    jFileChooser1.setDialogTitle("Add Locus File");

    if (jFileChooser1.APPROVE_OPTION == jFileChooser1.showOpenDialog(this)) {
      String filepath = jFileChooser1.getSelectedFile().getPath();
      String filename = jFileChooser1.getSelectedFile().getName();
      NodeInfo filenode = new NodeInfo(filename, "Trait File", new File(filepath));
      inserttraitfile(filenode);
    }
  }

  public void inserttraitfile(NodeInfo source) {
    jButton6.setEnabled(false);
    jTextField6.setEditable(false);
    jTextField6.setEnabled(false);

    File importFile = (File) source.file;
    String FilePath = importFile.getPath();
    Datamodel.setValue("trait_path", FilePath);
    jTextField4.setText(FilePath);

    jFileChooser1.setCurrentDirectory(importFile);
    Frame1.mainFrame1.path_forFileChooser = FilePath;

    Analysis_object.trait_file_path = FilePath;
    Analysis_object.input_file.add(FilePath);

    if (Analysis_object.create_input_folder == false) {
      NodeInfo nodeinfo = new NodeInfo("Input", "InputFolder", "MLOD",
                                       Analysis_object, "");
      IconNode node = new IconNode(nodeinfo, "InputFolder");

      inputF_node = addObject(node, analysis_node, false);
      Analysis_object.create_input_folder = true;
    }
    if (Analysis_object.create_trait_file_node == false) {
      trait_node = new IconNode(source, "Trait File");

      addObject(trait_node, inputF_node, false);
      Analysis_object.create_trait_file_node = true;
    }

    else {
      trait_node.setUserObject(source);
      TreePath p = new TreePath(trait_node.getPath());
      Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);
    }

    TreePath p = new TreePath(analysis_node.getPath());
    Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);

  }

  void jButton5_actionPerformed() {
    jFileChooser1.setFileFilter(GenomeFilter);
    jFileChooser1.setDialogTitle("Add Genome File");

    if (jFileChooser1.APPROVE_OPTION == jFileChooser1.showOpenDialog(this)) {
      String filepath = jFileChooser1.getSelectedFile().getPath();
      String filename = jFileChooser1.getSelectedFile().getName();
      NodeInfo filenode = new NodeInfo(filename, "Genome File", new File(filepath));
      insertgenomefile(filenode);
    }
  }

  public void insertgenomefile(NodeInfo source) {
    File importFile = (File) source.file;
    String FilePath = importFile.getPath();
    Datamodel.setValue("genome_path", FilePath);
    jTextField5.setText(FilePath);

    jFileChooser1.setCurrentDirectory(importFile);
    Frame1.mainFrame1.path_forFileChooser = FilePath;

    Analysis_object.genome_file_path = FilePath;
    Analysis_object.input_file.add(FilePath);

    if (Analysis_object.create_input_folder == false) {
      NodeInfo nodeinfo = new NodeInfo("Input", "InputFolder", "MLOD",
                                       Analysis_object, "");
      IconNode node = new IconNode(nodeinfo, "InputFolder");

      inputF_node = addObject(node, analysis_node, false);
      Analysis_object.create_input_folder = true;
    }
    if (Analysis_object.create_genome_file_node == false) {
      genome_node = new IconNode(source, "Genome File");

      addObject(genome_node, inputF_node, false);
      Analysis_object.create_genome_file_node = true;

      errorgenome_node.removeFromParent();
      treeModel.nodeStructureChanged(errorF_node);

      if (errorF_node.getChildCount() < 1) {
          Analysis_object.create_error_folder= false;
        errorF_node.removeFromParent();
        treeModel.nodeStructureChanged(analysis_node);
        TreePath p = new TreePath(genome_node.getPath());
        Frame1.mainFrame1.activeinframe.MyTree1.scrollPathToVisible(p);

        NodeInfo n = (NodeInfo) analysis_node.getUserObject();
        MLOD2 f2 = (MLOD2) n.component_vector.get(1);
        f2.jRunButton.setIcon(next_image);
      }
    }

    else {
      genome_node.setUserObject(source);
      TreePath p = new TreePath(genome_node.getPath());
      Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);
    }

    TreePath p = new TreePath(analysis_node.getPath());
    Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);
    Frame1.mainFrame1.activeinframe.MyTree1.Refresh();

    SetMLOD2RegionInfo(source);
  }

  void jButton6_actionPerformed() {
    jFileChooser1.setFileFilter(TypeFilter);
    jFileChooser1.setDialogTitle("Add Type File");

    if (jFileChooser1.APPROVE_OPTION == jFileChooser1.showOpenDialog(this)) {
      String filepath = jFileChooser1.getSelectedFile().getPath();
      String filename = jFileChooser1.getSelectedFile().getName();
      NodeInfo filenode = new NodeInfo(filename, "Type File", new File(filepath));
      inserttypefile(filenode);
    }
  }

  public void inserttypefile(NodeInfo source) {
    jButton4.setEnabled(false);
    jTextField4.setEditable(false);
    jTextField4.setEnabled(false);

    File importFile = (File) source.file;
    String FilePath = importFile.getPath();
    Datamodel.setValue("type_path", FilePath);
    jTextField6.setText(FilePath);

    jFileChooser1.setCurrentDirectory(importFile);
    Frame1.mainFrame1.path_forFileChooser = FilePath;

    Analysis_object.type_file_path = FilePath;
    Analysis_object.input_file.add(FilePath);

    if (Analysis_object.create_input_folder == false) {
      NodeInfo nodeinfo = new NodeInfo("Input", "InputFolder", "MLOD",
                                       Analysis_object, "");
      IconNode node = new IconNode(nodeinfo, "InputFolder");

      inputF_node = addObject(node, analysis_node, false);
      Analysis_object.create_input_folder = true;
    }
    if (Analysis_object.create_type_file_node == false) {
      type_node = new IconNode(source, "Type File");

      addObject(type_node, inputF_node, true);
      Analysis_object.create_type_file_node = true;
    }
    else {
      type_node.setUserObject(source);
      TreePath p = new TreePath(type_node.getPath());
      Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);
    }

    TreePath p = new TreePath(analysis_node.getPath());
    Frame1.mainFrame1.activeinframe.MyTree1.setSelectionPath(p);

    String model_name = getModelName(importFile);
    if(model_name.length()>0)
      AddTraitMarkerList(model_name);
  }

  String getModelName(File importFile)
  {
    String strFileLine = new String();

    try {
      FileInputStream fin = new FileInputStream(importFile);
      InputStreamReader isr = new InputStreamReader(fin);
      BufferedReader in = new BufferedReader(isr);

      while ((strFileLine = in.readLine()) != null) {

        if (strFileLine.trim().startsWith("Model")) {
          String[] model = strFileLine.split(",");
          if(model.length>1)
          {
            String temp = model[0];
            String[] modelname = temp.split("=");
            if(modelname.length>1)
            {
              temp = modelname[1].replaceAll("\"","").trim();
              return temp;
            }
          }
        }
      }
    } catch (Exception ex) {
      ex.printStackTrace();
    }

    return strFileLine;
  }

  void AddTraitMarkerList(String model_name)
  {
    NodeInfo n = (NodeInfo) analysis_node.getUserObject();
   final MLOD2 f2 = (MLOD2) n.component_vector.get(1);

   NodeInfo para = (NodeInfo)para_node.getUserObject();
   DataCollectionModel dm = (DataCollectionModel) para.infomodel;

   int totalsize = 0;

   if (dm.hasValue("TraitMarker_array")) {
     Vector TraitMarker_array = (Vector) dm.getValue("TraitMarker_array");
     int length1 = TraitMarker_array.size();
     totalsize = totalsize + length1;
   }

   if (dm.hasValue("Marker_array")) {
     Vector Marker_array = (Vector) dm.getValue("Marker_array");
     int length1 = Marker_array.size();
     totalsize = totalsize + length1;
   }

   totalsize = totalsize+1;

   final CheckableItem[] items = new CheckableItem[totalsize];
   int i = 0;

   if (dm.hasValue("TraitMarker_array")) {
     Vector TraitMarker_array = (Vector) dm.getValue("TraitMarker_array");
     for (Enumeration en = TraitMarker_array.elements(); en.hasMoreElements(); i++) {
       String temp = en.nextElement().toString();
       VariableData temp2 = new VariableData(temp, "trait_marker");
       items[i] = new CheckableItem(temp2);
     }
   }

   if (dm.hasValue("Marker_array")) {
     Vector Marker_array = (Vector) dm.getValue("Marker_array");
     for (Enumeration en = Marker_array.elements(); en.hasMoreElements(); i++) {
       String temp = en.nextElement().toString();
       VariableData temp2 = new VariableData(temp, "marker");
       items[i] = new CheckableItem(temp2);
     }
   }

   VariableData model_var = new VariableData(model_name, "trait_marker");
   CheckableItem cm = new CheckableItem(model_var);
   items[i] = cm;

   Runnable setinfo = new Runnable() {
     public void run() {
       f2.jTraitMarkerComboBox.setData(items);
     }
   };
   SwingUtilities.invokeLater(setinfo);

  }



  void SetMLOD2RegionInfo(NodeInfo source) {
    NodeInfo n = (NodeInfo) analysis_node.getUserObject();
    MLOD2 f2 = (MLOD2) n.component_vector.get(1);
    if (source.infomodel == null) {
      FavoritesPanel.Parse_Genome_File(source);
    }

    DataCollectionModel dm = (DataCollectionModel) source.infomodel;

    String para_list = null;
    CheckableItem[] para_lm = null;

      if(f2.jRegionComboBox.getSelectedItem()!=null)
      {
        para_list = f2.jRegionComboBox.getSelectedItem().toString();
        para_lm = f2.jRegionComboBox.ListData;
      }

    if (dm.hasValue("Region_List")) {
      Vector v = (Vector) dm.getValue("Region_List");
      int length = v.size();
      CheckableItem[] items = new CheckableItem[length];

      int i = 0;
      String list=new String();
      for (Enumeration e = v.elements(); e.hasMoreElements(); i++) {
        String temp = e.nextElement().toString().trim();
        VariableData temp2 = new VariableData(temp, "region");
        items[i] = new CheckableItem(temp2);
        if(para_list == null || para_lm == null)
        {
          items[i].setSelected(true);
          list = list + ", " + items[i];
        }
        else
        {
          StringTokenizer st = new StringTokenizer(para_list, ",");
          while (st.hasMoreTokens()) {
            String checkitem = st.nextElement().toString().trim();
            if (items[i].toString().compareTo(checkitem) == 0)
            {
              items[i].setSelected(true);
              list = list + ", " + items[i];
            }
          }
        }
      }
      list = list.replaceFirst(",","");
      list = list.trim();

      f2.jRegionComboBox.setData(items);
      f2.jRegionComboBox.setSelectedItem(list);
    }
  }

  public void changedUpdate(DocumentEvent event) {
    Document document = event.getDocument();
    if (document == jTextFieldPara.getDocument()) {
      Datamodel.setValue("para_path", jTextFieldPara.getText());
    }
    if (document == jTextFieldPed.getDocument()) {
        if(jTextFieldPed.getText().length()>0)
        {
            Datamodel.setValue("pedi_path", jTextFieldPed.getText());
        }
        else
        {
            if(Datamodel.hasValue("pedi_path"))
                Datamodel.removeValue("pedi_path");
        }
    }
    if (document == jTextField3.getDocument()) {
      if(jTextField3.getText().length()>0)
      {
          Datamodel.setValue("locus_path", jTextField3.getText());
      }
      else
      {
          if(Datamodel.hasValue("locus_path"))
              Datamodel.removeValue("locus_path");
      }
    }
    if (document == jTextField4.getDocument()) {
      Datamodel.setValue("trait_path", jTextField4.getText());
    }
    if (document == jTextField5.getDocument()) {
        if (jTextField5.getText().length() > 0)
        {
            Datamodel.setValue("genome_path", jTextField5.getText());
        }
        else {
            if (Datamodel.hasValue("genome_path"))
                Datamodel.removeValue("genome_path");
        }
    }

    if (document == OutputNameField.getDocument()) {
      Datamodel.setValue("output_name", OutputNameField.getText());
      if (OutputNameField.getText().length() <= 0)
        Datamodel.removeValue("output_name");
    }

    if (Datamodel.hasValue("para_path") && Datamodel.hasValue("pedi_path")
        && Datamodel.hasValue("locus_path") && Datamodel.hasValue("genome_path")) {
      jNextButton.setIcon(next_image);
    }
  }

  public void insertUpdate(DocumentEvent event) {
    changedUpdate(event);
  }

  public void removeUpdate(DocumentEvent event) {
    changedUpdate(event);
  }

  void detelePedNode()
  {
    if(errorpedigree_node != null && errorF_node != null)
    {
        addObject(errorpedigree_node, errorF_node, false);
        if(!Analysis_object.create_error_folder)
        {
            treeModel.insertNodeInto(errorF_node, analysis_node, 0);
            Analysis_object.create_error_folder = true;
        }

        Analysis_object.create_family_file_node = false;
        TreePath p = new TreePath(errorpedigree_node.getPath());
        Frame1.mainFrame1.activeinframe.MyTree1.scrollPathToVisible(p);
    }
  }

  void deteleLocusNode()
  {
    if(errorlocus_node != null && errorF_node != null)
    {
        addObject(errorlocus_node, errorF_node, false);
        if(!Analysis_object.create_error_folder)
        {
            treeModel.insertNodeInto(errorF_node, analysis_node, 0);
            Analysis_object.create_error_folder = true;
        }

        Analysis_object.create_locus_file_node = false;
        TreePath p = new TreePath(errorlocus_node.getPath());
        Frame1.mainFrame1.activeinframe.MyTree1.scrollPathToVisible(p);
    }
  }

  void deteleGenomeNode()
  {
    if (errorgenome_node != null && errorF_node != null) {
        addObject(errorgenome_node, errorF_node, false);
        if(!Analysis_object.create_error_folder)
        {
            treeModel.insertNodeInto(errorF_node, analysis_node, 0);
            Analysis_object.create_error_folder = true;
        }

        Analysis_object.create_genome_file_node = false;
        TreePath p = new TreePath(errorgenome_node.getPath());
        Frame1.mainFrame1.activeinframe.MyTree1.scrollPathToVisible(p);
    }
  }


 void jTextField1_mouseClicked(MouseEvent e) {
     Frame1.mainFrame1.pdfframe.setTextonPage("parameter fil", false, 317);
  }

  void jTextField2_mouseClicked(MouseEvent e) {
      Frame1.mainFrame1.pdfframe.setTextonPage("pedigree data fil", false, 317);
  }

  void jTextField3_mouseClicked(MouseEvent e) {
      Frame1.mainFrame1.pdfframe.setTextonPage("marker locus description fil", false, 317);
  }

  void jTextField4_mouseClicked(MouseEvent e) {
      Frame1.mainFrame1.pdfframe.setTextonPage("trait locus description fil", false, 317);
  }

  void jTextField5_mouseClicked(MouseEvent e) {
      Frame1.mainFrame1.pdfframe.setTextonPage("Genome description fil", false, 317);
  }

  void jTextField6_mouseClicked(MouseEvent e) {

  }

  void OutputNameField_mouseClicked(MouseEvent e) {
      Frame1.mainFrame1.pdfframe.setTextonPage("out ", false, 318);
  }
}

class MLOD1_jTextField1_mouseAdapter extends java.awt.event.MouseAdapter {
  MLOD1 adaptee;

  MLOD1_jTextField1_mouseAdapter(MLOD1 adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.jTextField1_mouseClicked(e);
  }
}

class MLOD1_jTextField2_mouseAdapter extends java.awt.event.MouseAdapter {
  MLOD1 adaptee;

  MLOD1_jTextField2_mouseAdapter(MLOD1 adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.jTextField2_mouseClicked(e);
  }
}

class MLOD1_jTextField3_mouseAdapter extends java.awt.event.MouseAdapter {
  MLOD1 adaptee;

  MLOD1_jTextField3_mouseAdapter(MLOD1 adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.jTextField3_mouseClicked(e);
  }
}

class MLOD1_jTextField4_mouseAdapter extends java.awt.event.MouseAdapter {
  MLOD1 adaptee;

  MLOD1_jTextField4_mouseAdapter(MLOD1 adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.jTextField4_mouseClicked(e);
  }
}

class MLOD1_jTextField5_mouseAdapter extends java.awt.event.MouseAdapter {
  MLOD1 adaptee;

  MLOD1_jTextField5_mouseAdapter(MLOD1 adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.jTextField5_mouseClicked(e);
  }
}

class MLOD1_jTextField6_mouseAdapter extends java.awt.event.MouseAdapter {
  MLOD1 adaptee;

  MLOD1_jTextField6_mouseAdapter(MLOD1 adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.jTextField6_mouseClicked(e);
  }
}

class MLOD1_OutputNameField_mouseAdapter extends java.awt.event.MouseAdapter {
  MLOD1 adaptee;

  MLOD1_OutputNameField_mouseAdapter(MLOD1 adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.OutputNameField_mouseClicked(e);
  }
}
